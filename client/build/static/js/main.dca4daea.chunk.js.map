{"version":3,"sources":["components/Header.jsx","components/Homepage.jsx","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleSignInClick","window","open","handleLogoutClick","props","handleNotAuthenticated","authenticated","this","className","to","onClick","Component","HomePage","state","user","error","setState","fetch","method","credentials","headers","Accept","then","response","status","json","Error","responseJson","catch","name","AppRouter","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAIqBA,E,4MAqBnBC,kBAAoB,WAClBC,OAAOC,KAAK,gBAAiB,U,EAG/BC,kBAAoB,WAClBF,OAAOC,KAAK,eAAgB,SAC5B,EAAKE,MAAMC,0B,uDAtBH,IACAC,EAAkBC,KAAKH,MAAvBE,cACR,OACE,wBAAIE,UAAU,QACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEDH,EACC,wBAAII,QAASH,KAAKJ,mBAAlB,UAEA,wBAAIO,QAASH,KAAKP,mBAAlB,c,GAf0BW,aCAfC,E,4MAWnBC,MAAQ,CACNC,KAAM,GACNC,MAAO,KACPT,eAAe,G,EAuDjBD,uBAAyB,WACvB,EAAKW,SAAS,CAAEV,eAAe,K,kEArDZ,IAAD,OAClBW,MAAM,sBAAuB,CAC3BC,OAAQ,MACRC,YAAa,UACbC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChB,oCAAoC,KAGrCC,MAAK,SAACC,GACL,GAAwB,MAApBA,EAASC,OACX,OAAOD,EAASE,OAElB,MAAM,IAAIC,MAAM,kCAEjBJ,MAAK,SAACK,GACL,EAAKX,SAAS,CACZV,eAAe,EACfQ,KAAMa,EAAab,UAGtBc,OAAM,SAACb,GACN,EAAKC,SAAS,CACZV,eAAe,EACfS,MAAO,qC,+BAKL,IACAT,EAAkBC,KAAKM,MAAvBP,cACR,OACE,6BACE,kBAAC,EAAD,CACEA,cAAeA,EACfD,uBAAwBE,KAAKF,yBAE/B,6BACIC,EAGA,6BACE,6DACA,uCAAaC,KAAKM,MAAMC,KAAKe,KAA7B,MAJF,8C,GAzD0BlB,a,OCAzBmB,EAAY,WACvB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,OCC1BsB,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFOvB,aCSEwB,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.dca4daea.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nexport default class Header extends Component {\n  static propTypes = {\n    authenticated: PropTypes.bool.isRequired,\n  };\n\n  render() {\n    const { authenticated } = this.props;\n    return (\n      <ul className=\"menu\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        {authenticated ? (\n          <li onClick={this.handleLogoutClick}>Logout</li>\n        ) : (\n          <li onClick={this.handleSignInClick}>Login</li>\n        )}\n      </ul>\n    );\n  }\n\n  handleSignInClick = () => {\n    window.open(\"/auth/twitter\", \"_self\");\n  };\n\n  handleLogoutClick = () => {\n    window.open(\"/auth/logout\", \"_self\");\n    this.props.handleNotAuthenticated();\n  };\n}\n","import Header from \"./Header\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\nexport default class HomePage extends Component {\n  static propTypes = {\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      profileImageUrl: PropTypes.string,\n      twitterId: PropTypes.string,\n      screenName: PropTypes.string,\n      _id: PropTypes.string,\n    }),\n  };\n\n  state = {\n    user: {},\n    error: null,\n    authenticated: false,\n  };\n\n  componentDidMount() {\n    fetch(\"/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true,\n      },\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          return response.json();\n        }\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then((responseJson) => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user,\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\",\n        });\n      });\n  }\n\n  render() {\n    const { authenticated } = this.state;\n    return (\n      <div>\n        <Header\n          authenticated={authenticated}\n          handleNotAuthenticated={this.handleNotAuthenticated}\n        />\n        <div>\n          {!authenticated ? (\n            <h1>Welcome!</h1>\n          ) : (\n            <div>\n              <h1>You have login succcessfully!</h1>\n              <h2>Welcome {this.state.user.name}!</h2>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  handleNotAuthenticated = () => {\n    this.setState({ authenticated: false });\n  };\n}\n","import React from \"react\";\nimport HomePage from \"./components/Homepage\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nexport const AppRouter = () => {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={HomePage} />\n      </div>\n    </Router>\n  );\n};\n","import React, { Component } from \"react\";\nimport { AppRouter } from \"./AppRouter\";\n\nclass App extends Component {\n  render() {\n    return <AppRouter />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}